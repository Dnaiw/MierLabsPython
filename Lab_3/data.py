text1 = "При написании объёмного кода, часто прибегают к разбиению такового на логически независимые блоки и к последующему выносу в другие файлы. Это повышает читаемость как самого кода, так и проекта целиком. Что влечет за собой менее ресурсозатратную поддержку(дальнейшую модификацию кодовой базы для разных нужд). После разделения кода по файлам, следует выстроить их взаимодействие. В языке программирования Python данный механизм реализуется с использованием import. Импортировать можно любые компоненты(если Вы кодом не ограничивали таковые) модулей или пакетов.Модули также могут быть написаны и на других языках, но данная статья направлена на рассмотрение использования данного механизмах в рамках Python."

text2 = "Дальше стоит понимать, что любая программа имеет некую точку входа. Это своего рода место с которого стартует наш скрипт. В языках предшественниках данной точкой служила функция main и могла быть лишь только одной. В нашем случае допускается отсутствие таковой, но это снижает качество кода, делая его сложным и малопредсказуемым(при импорте код содержащийся на верхнем уровне исполняется). Для того чтобы указать точку входа(может быть указана только в модулях) используется специальная переменная __name__, в которой содержится наименование текущего модуля или пакета. Если текущий модуль находится на верхнем уровне исполнения(мы явно его передали на исполнение Python), то он называется __main__ независимо от названия файла."

text3 = "При переносе файлов куда-либо из директории возникнут проблемы из-за первого импорта(main.py). Поскольку часто приходится писать один и тот же код, использование уже хорошо написанного пакета или модуля может экономить много времени, но исправление большого количества импортов требует Ваших ресурсов. Хорошо написанный пакет, модуль или импорт может экономить ваши рабочие часы, а иногда и нервы."

commentText1 = "несомненно, эта статья рассчитана на новичков в Python. Я считаю, что эта статья должна получить боььше плюсов, чем сейчас, ведь новички чаще учатся новым для них языкам именно из статей/туторов, чем из референсов, которые для новичка часто могут быть непонятны (говорю по своему опыту)"

commentText2 = "Статья нормальная, но в функции get_dict() вы сделали опечатку. Вы написали 'satus', а надо 'status'. С правками должно выйти так:"

commentText3 = "Так ведь вы рассказали очевидные вещи, про которые рассказывают в каждом Хабре про ту или другую библиотеку!"